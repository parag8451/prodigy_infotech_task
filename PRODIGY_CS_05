#!/usr/bin/env python3
from scapy.all import *
from scapy.layers import http
from PyQt5.QtWidgets import (QApplication, QMainWindow, QTableWidget, 
                            QTableWidgetItem, QVBoxLayout, QWidget, 
                            QLabel, QLineEdit, QPushButton, QComboBox)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
import sys
import signal

class SnifferThread(QThread):
    packet_received = pyqtSignal(object)
    
    def __init__(self, interface, filter_exp=None):
        super().__init__()
        self.interface = interface
        self.filter_exp = filter_exp
        self.running = True
    
    def run(self):
        if self.filter_exp:
            sniff(iface=self.interface, filter=self.filter_exp, 
                  prn=self.packet_received.emit, store=False, stop_filter=lambda _: not self.running)
        else:
            sniff(iface=self.interface, prn=self.packet_received.emit, 
                  store=False, stop_filter=lambda _: not self.running)
    
    def stop(self):
        self.running = False

class PacketSnifferGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Network Packet Analyzer")
        self.setGeometry(100, 100, 1000, 600)
        
        self.interface = None
        self.sniffer_thread = None
        
        self.init_ui()
        self.show_interfaces()
    
    def init_ui(self):
        # Main widget and layout
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        layout = QVBoxLayout()
        
        # Interface selection
        self.interface_combo = QComboBox()
        self.interface_label = QLabel("Select Network Interface:")
        layout.addWidget(self.interface_label)
        layout.addWidget(self.interface_combo)
        
        # Filter expression
        self.filter_edit = QLineEdit()
        self.filter_label = QLabel("BPF Filter (e.g., 'tcp port 80'):")
        layout.addWidget(self.filter_label)
        layout.addWidget(self.filter_edit)
        
        # Buttons
        self.start_button = QPushButton("Start Sniffing")
        self.start_button.clicked.connect(self.start_sniffer)
        self.stop_button = QPushButton("Stop Sniffing")
        self.stop_button.clicked.connect(self.stop_sniffer)
        self.stop_button.setEnabled(False)
        
        layout.addWidget(self.start_button)
        layout.addWidget(self.stop_button)
        
        # Packet table
        self.packet_table = QTableWidget()
        self.packet_table.setColumnCount(6)
        self.packet_table.setHorizontalHeaderLabels(["No.", "Time", "Source", "Destination", "Protocol", "Info"])
        self.packet_table.setColumnWidth(0, 50)
        self.packet_table.setColumnWidth(1, 120)
        self.packet_table.setColumnWidth(2, 150)
        self.packet_table.setColumnWidth(3, 150)
        self.packet_table.setColumnWidth(4, 80)
        self.packet_table.setColumnWidth(5, 400)
        layout.addWidget(self.packet_table)
        
        main_widget.setLayout(layout)
        self.packet_count = 0
    
    def show_interfaces(self):
        interfaces = get_if_list()
        self.interface_combo.addItems(interfaces)
    
    def start_sniffer(self):
        self.interface = self.interface_combo.currentText()
        filter_exp = self.filter_edit.text().strip() or None
        
        self.sniffer_thread = SnifferThread(self.interface, filter_exp)
        self.sniffer_thread.packet_received.connect(self.process_packet)
        self.sniffer_thread.start()
        
        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
    
    def stop_sniffer(self):
        if self.sniffer_thread:
            self.sniffer_thread.stop()
            self.sniffer_thread.wait()
            self.sniffer_thread = None
        
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
    
    def process_packet(self, packet):
        self.packet_count += 1
        row_position = self.packet_table.rowCount()
        self.packet_table.insertRow(row_position)
        
        # Packet number
        self.packet_table.setItem(row_position, 0, QTableWidgetItem(str(self.packet_count)))
        
        # Time
        time_str = datetime.fromtimestamp(packet.time).strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        self.packet_table.setItem(row_position, 1, QTableWidgetItem(time_str))
        
        if packet.haslayer(IP):
            src_ip = packet[IP].src
            dst_ip = packet[IP].dst
            proto = packet[IP].proto
            
            # Source and Destination
            self.packet_table.setItem(row_position, 2, QTableWidgetItem(src_ip))
            self.packet_table.setItem(row_position, 3, QTableWidgetItem(dst_ip))
            
            # Protocol and Info
            if proto == 1:  # ICMP
                self.packet_table.setItem(row_position, 4, QTableWidgetItem("ICMP"))
                self.packet_table.setItem(row_position, 5, QTableWidgetItem(f"ICMP {packet[ICMP].type}"))
            
            elif proto == 6:  # TCP
                self.packet_table.setItem(row_position, 4, QTableWidgetItem("TCP"))
                info = f"{packet[TCP].sport} → {packet[TCP].dport} [{' '.join(packet[TCP].flags)}] Seq={packet[TCP].seq} Ack={packet[TCP].ack}"
                self.packet_table.setItem(row_position, 5, QTableWidgetItem(info))
            
            elif proto == 17:  # UDP
                self.packet_table.setItem(row_position, 4, QTableWidgetItem("UDP"))
                info = f"{packet[UDP].sport} → {packet[UDP].dport} Len={packet[UDP].len}"
                self.packet_table.setItem(row_position, 5, QTableWidgetItem(info))
            
            else:
                self.packet_table.setItem(row_position, 4, QTableWidgetItem(str(proto)))
                self.packet_table.setItem(row_position, 5, QTableWidgetItem(""))
            
            # HTTP info
            if packet.haslayer(http.HTTPRequest):
                http_info = f"HTTP Request: {packet[http.HTTPRequest].Host.decode()}{packet[http.HTTPRequest].Path.decode()}"
                self.packet_table.item(row_position, 5).setText(http_info)
            
            elif packet.haslayer(http.HTTPResponse):
                self.packet_table.item(row_position, 5).setText("HTTP Response")
        
        elif packet.haslayer(ARP):
            self.packet_table.setItem(row_position, 2, QTableWidgetItem(packet[ARP].psrc))
            self.packet_table.setItem(row_position, 3, QTableWidgetItem(packet[ARP].pdst))
            self.packet_table.setItem(row_position, 4, QTableWidgetItem("ARP"))
            info = f"ARP {packet[ARP].op} {packet[ARP].psrc} is at {packet[ARP].hwsrc}"
            self.packet_table.setItem(row_position, 5, QTableWidgetItem(info))
        
        # Scroll to the new row
        self.packet_table.scrollToBottom()

if __name__ == "__main__":
    # Handle Ctrl+C properly with PyQt
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    
    app = QApplication(sys.argv)
    window = PacketSnifferGUI()
    window.show()
    sys.exit(app.exec_())
